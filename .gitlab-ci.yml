stages:
  - prepare
  - build
  - test
  - deploy
  - release

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store
    - node_modules/

variables:
  CI: true
  GIT_DEPTH: 2
  GIT_STRATEGY: fetch

comment:
  image: node:lts-alpine
  tags: [docker]
  stage: prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS !~ /dependency/
  before_script:
    - corepack install
    - corepack enable
    - pnpm install
  script: pnpm changesets-gitlab comment
  variables:
    GITLAB_TOKEN: $CI_API_TOKEN

comment-renovate:
  image: node:lts-alpine
  tags: [docker]
  stage: prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS =~ /dependency/
  before_script:
    - corepack install
    - corepack enable
    - pnpm install
  script: |
    apk add --no-cache jq curl git
    pnpm changesets-gitlab comment

    sleep 5s
    echo "Looking for changeset template in discussions..."

    # Get merge request discussions
    DISCUSSIONS=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/discussions")

    if [ $? -ne 0 ] || [ -z "$DISCUSSIONS" ]; then
      echo "Failed to fetch discussions or no discussions found"
      exit 1
    fi

    # Extract notes containing our warning pattern
    WARNING_NOTES=$(echo "$DISCUSSIONS" | jq -r '.[] | .notes[] |
      select(.body | contains("###  ⚠️  No Changeset found")) | .body')

    if [ -z "$WARNING_NOTES" ]; then
      echo "No changeset warning found in discussions"
      exit 0
    fi

    echo "Found warning note, extracting YAML template..."

    # Extract YAML block between ```yaml and ```
    CHANGESET=$(echo "$WARNING_NOTES" | sed -n '/```yaml/,/```/p')

    if [ -z "$CHANGESET" ]; then
      echo "No YAML template found in warning note"
      exit 0
    fi

    # Extract the filename from "you can copy and paste the following template into .changeset/purple-frogs-enter.md instead"
    FILENAME=$(echo "$WARNING_NOTES" | grep -oP '(?<=\*\*\*You can copy and paste the following template into ).*(?= instead)' | sed 's/\.md//')

    if [ -z "$FILENAME" ]; then
      echo "No filename found in warning note"
      exit 0
    fi

    # Create the file in the .changeset directory with the extracted YAML
    mkdir -p .changeset
    echo "$CHANGESET" | sed '1d;$d' > ".changeset/$FILENAME.md"

    # Commit and push the changeset file using the GITLAB_TOKEN for authentication
    git config --global user.name "Renovate Bot"
    git config --global user.email "gitlab-renovate-bot@ltgk.net"
    git add ".changeset/$FILENAME.md"
    git commit -m "Add changeset for $FILENAME"
    git push "https://oauth2:${CI_API_TOKEN}@git.ltgk.net/${CI_PROJECT_PATH}.git" HEAD:${CI_COMMIT_REF_NAME}
  variables:
    GITLAB_TOKEN: $CI_API_TOKEN

clean:
  image: node:lts-alpine
  tags: [docker]
  stage: prepare
  before_script:
    - corepack install
    - corepack enable
    - pnpm install
  script: pnpm clean

devcontainer_job:
  stage: build
  timeout: 30 minutes
  tags: [docker]
  image: docker:28.0.4
  services:
    - docker:28.0.4-dind
  variables:
    DOCKER_BUILDKIT: "1"
    DOCKER_DRIVER: "overlay2"
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT_INLINE_CACHE: "1"
    DOCKER_CONTAINERD_IMAGE_STORE: "1"
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE/dev-container:$CI_COMMIT_REF_SLUG"
  before_script:
    - apk add --update nodejs npm python3 make g++
    - npm install --global @devcontainers/cli
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $FQ_IMAGE_NAME || docker pull $CI_REGISTRY_IMAGE/dev-container:$CI_DEFAULT_BRANCH || true
    - docker tag $CI_REGISTRY_IMAGE/dev-container:$CI_DEFAULT_BRANCH $FQ_IMAGE_NAME || true
    - devcontainer build --cache-from $FQ_IMAGE_NAME --cache-to type=inline,mode=max --image-name $FQ_IMAGE_NAME --workspace-folder .
    - docker push $FQ_IMAGE_NAME

build_job:
  stage: build
  timeout: 30 minutes
  image: docker:28.0.4
  tags: [docker]
  services:
    - docker:28.0.4-dind
  needs:
    - job: devcontainer_job
  variables:
    CI: true
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE/dev-container:$CI_COMMIT_REF_SLUG"
  before_script:
    - docker pull $FQ_IMAGE_NAME
  script: |
    #!/bin/sh
    set -e
    build_date="$(date +%s)"
    apk add --update nodejs npm python3 make g++
    npm install --global @devcontainers/cli

    # Create a label for use during cleanup since the devcontainer CLI does
    # not have a "remove" or "down" command yet (though this is planned).
    id_label="ci-container=${build_date}"

    # Run build
    rm -rf node_modules/
    devcontainer up --cache-from $FQ_IMAGE_NAME --id-label ${id_label} --remote-env CI=true --workspace-folder .
    set +e
    devcontainer exec --id-label ${id_label} --workspace-folder . pnpm coverage --run
    build_exit_code=$?
    set -e

    # Clean up.
    docker rm -f $(docker ps -aq --filter label=${id_label})
    exit ${build_exit_code}
  coverage: /All files(?:[^|]*\|){4}\s*(\S+)/
  artifacts:
    paths:
      - dist/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit:
        - coverage/junit.xml

release:
  image: node:lts-alpine
  tags: [docker]
  stage: release
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build_job
      artifacts: true
  before_script:
    - corepack install
    - corepack enable
    - pnpm install
  script:
    - |
      cat << EOF > ".npmrc"
        //registry.npmjs.org/:_authToken=$NPM_TOKEN
      EOF
    - pnpm changesets-gitlab
  variables:
    GITLAB_TOKEN: $CI_API_TOKEN
    INPUT_VERSION: pnpm changeset version

pages_job:
  image: ruby:latest
  stage: deploy
  pages: true
  tags: [docker]
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - job: build_job
      artifacts: true
  script:
    - gem install github-pages
    - github-pages build --source docs --destination public
  artifacts:
    paths:
      - public
